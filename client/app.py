from tkinter import *
from os import path
import client
import configparser
import login, home, chat


class ChatApp(object):
    """
    High-level class responsible for coordinating front-end interactions.

    Instance variables:
        chats (list): holds all the chats for the associated user
        chat_screens (dict): holds the currently open chat screens, identified by their chat id
        SERVER_NAME (string): the address of the server
        SERVER_PORT (string): the port that the serve listens on
    """

    chats = list()
    chat_screens = dict()
    SERVER_NAME = "196.47.216.151"
    SERVER_PORT = 9999
    

    def __init__(self) -> None:      
        """
        Creates a new chat client.
        Loads in the config, creates the GUI and shows the login screen
        """  
        self.load_config()
        self.root = Tk()

        self.loginScreen = login.LoginScreen(self)

        self.root.withdraw()
        self.root.mainloop()


    def fetch_messages(self, chat_id, *args):
        """
        Retrieves the message history for a particular chat

        Parameters:
            chat_id (string): The ID of the chat whose history must be fetched
            args (any): used to handle the button press event generated by the gui
        """
        self.client.get_messages(chat_id)


    def load_config(self):
        """
        Loads a configuration from the .config file, or creates one if it doesn't already exist
        """

        if not path.exists(".config"):
            config = configparser.ConfigParser()

            config["SESSION_INFO"] = {
                "server_ip": "",
                "user_id": ""
            }

            with open(".config", "w") as configfile:
                config.write(configfile)

        
        config = configparser.ConfigParser()
        config.read(".config")

        self.SERVER_NAME = config["SESSION_INFO"]["server_ip"]
        self.user_id = config["SESSION_INFO"]["user_id"]


    def open_chat_screen(self, chats):
        """
        Opens a new chat window for the specified chat_id

        Parameters:
            chats (dict): the response object from the sever containing all the information about a specific chat
        """
        self.chat_screens[chats["chat_id"]] = chat.ChatScreen(self, chats)


    def open_home(self, user_id, server_ip):
        """
        Opens the home screen and starts the client.

        This method is called when the user logs into the app. Also saves the two parameters to a .config file

        Parameters:
            user_id (string): the user's identification in the database
            server_ip (string): the ipadress of the server
        """

        config = configparser.ConfigParser()
        config.read(".config")

        config["SESSION_INFO"]["server_ip"] = server_ip
        config["SESSION_INFO"]["user_id"] = user_id

        with open(".config", "w") as configfile:
            config.write(configfile)


        self.user_id = user_id
        self.SERVER_NAME = server_ip
        
        self.client = client.Client(self)
        self.hs= home.HomeScreen(self)
        self.hs.redraw_chat_frame()


if __name__ == "__main__":
    ChatApp()